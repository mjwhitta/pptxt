#!/usr/bin/env ruby

require "colorize"
require "io/wait"
require "optparse"
require "pathname"
require "pptxt"

class PPtxtExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
    AMBIGUOUS_ARGUMENT = 6
end

def parse(args)
    options = Hash.new
    options["detailed"] = false
    options["git"] = false
    options["pptx"] = nil
    options["slideshow"] = false
    options["verbose"] = false

    parser = OptionParser.new do |opts|
        opts.summary_width = 20

        opts.banner = "Usage: #{File.basename($0)} [OPTIONS] <pptx>"

        opts.on(
            "-c",
            "--configure",
            "Configure git repo to use pptxt"
        ) do
            PPtxt.configure_git
            exit PPtxtExit::GOOD
        end

        opts.on("-d", "--detailed", "Display full xml") do
            options["detailed"] = true
        end

        opts.on("--git", "Hide the slide dividers for git-diff") do
            options["git"] = true
        end

        opts.on(
            "-g",
            "--global-config",
            "Configure git to use pptxt globally"
        ) do
            PPtxt.configure_git(true)
            exit PPtxtExit::GOOD
        end

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit PPtxtExit::GOOD
        end

        opts.on("-s", "--slideshow", "Display as slideshow") do
            options["slideshow"] = true
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit PPtxtExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit PPtxtExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit PPtxtExit::MISSING_ARGUMENT
    rescue OptionParser::AmbiguousOption => e
        puts e.message
        puts parser
        exit PPtxtExit::AMBIGUOUS_ARGUMENT
    end

    if (args.empty?)
        puts parser
        exit PPtxtExit::MISSING_ARGUMENT
    elsif (args.length > 1)
        puts parser
        exit PPtxtExit::EXTRA_ARGUMENTS
    end

    options["pptx"] = args[0].strip
    exit PPtxtExit::GOOD if (options["pptx"] == "/dev/null")

    return options
end

# Parse CLI args
options = parse(ARGV)

begin
    # Get slides
    slides = PPtxt.new(options["pptx"]).slides

    if (!options["slideshow"])
        # Loop through slides
        slides.each do |slide|
            if (options["detailed"])
                puts slide.detailed
            elsif (options["git"])
                puts slide.diffable
                puts
            else
                puts slide
                puts
            end
        end
    else
        quit = false
        count = 0

        while (!quit)
            slide = slides[count]

            # Make it human readable and parse
            system("clear")
            puts
            puts slide
            puts
            puts "j:Next k:Previous q:Quit"

            answer = nil
            while (!answer)
                begin
                    system("stty raw -echo")
                    if $stdin.ready?
                        answer = $stdin.getc.chr
                    else
                        sleep 0.1
                    end
                ensure
                    system("stty -raw echo")
                end
            end
            puts

            case answer
            when "j", "J"
                count += 1 if (count < (slides.length - 1))
            when "k", "K"
                count -= 1 if (count > 0)
            when "q", "Q", "\x03"
                # Quit or ^C
                quit = true
            end
        end
    end
rescue Interrupt
    # ^C
    # Exit gracefully
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before we're done with STDOUT.
rescue PPtxt::Error => e
    puts e.message
    exit PPtxtExit::EXCEPTION
rescue Exception => e
    $stderr.puts
    $stderr.puts "Oops! Looks like an error has occured! If the " \
        "error persists, file a bug at:"
    $stderr.puts
    $stderr.puts "    https://gitlab.com/mjwhitta/pptxt/issues"
    $stderr.puts
    $stderr.puts "Maybe the message below will help. If not, you " \
        "can use the --verbose flag to get"
    $stderr.puts "a backtrace."

    $stderr.puts e.message.white.on_red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.light_yellow
        end
    end
    exit PPtxtExit::EXCEPTION
end
exit PPtxtExit::GOOD
